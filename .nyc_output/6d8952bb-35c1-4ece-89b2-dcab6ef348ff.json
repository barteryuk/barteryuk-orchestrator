{"/Users/robin/Desktop/hacktiv8/phase3/w4/barteryuk/barteryuk-orchestrator/datasources/user.js":{"path":"/Users/robin/Desktop/hacktiv8/phase3/w4/barteryuk/barteryuk-orchestrator/datasources/user.js","statementMap":{"0":{"start":{"line":1,"column":14},"end":{"line":1,"column":30}},"1":{"start":{"line":3,"column":14},"end":{"line":3,"column":32}},"2":{"start":{"line":5,"column":14},"end":{"line":5,"column":25}},"3":{"start":{"line":9,"column":4},"end":{"line":9,"column":29}},"4":{"start":{"line":11,"column":16},"end":{"line":11,"column":35}},"5":{"start":{"line":15,"column":4},"end":{"line":32,"column":5}},"6":{"start":{"line":16,"column":20},"end":{"line":16,"column":56}},"7":{"start":{"line":18,"column":6},"end":{"line":29,"column":7}},"8":{"start":{"line":19,"column":8},"end":{"line":19,"column":21}},"9":{"start":{"line":23,"column":12},"end":{"line":26,"column":10}},"10":{"start":{"line":27,"column":8},"end":{"line":27,"column":49}},"11":{"start":{"line":28,"column":8},"end":{"line":28,"column":20}},"12":{"start":{"line":31,"column":6},"end":{"line":31,"column":44}},"13":{"start":{"line":36,"column":4},"end":{"line":77,"column":5}},"14":{"start":{"line":39,"column":10},"end":{"line":42,"column":8}},"15":{"start":{"line":43,"column":20},"end":{"line":43,"column":56}},"16":{"start":{"line":45,"column":6},"end":{"line":50,"column":7}},"17":{"start":{"line":46,"column":8},"end":{"line":46,"column":27}},"18":{"start":{"line":47,"column":8},"end":{"line":47,"column":49}},"19":{"start":{"line":49,"column":8},"end":{"line":49,"column":49}},"20":{"start":{"line":52,"column":25},"end":{"line":52,"column":67}},"21":{"start":{"line":52,"column":43},"end":{"line":52,"column":66}},"22":{"start":{"line":54,"column":6},"end":{"line":74,"column":7}},"23":{"start":{"line":55,"column":8},"end":{"line":59,"column":10}},"24":{"start":{"line":61,"column":8},"end":{"line":73,"column":10}},"25":{"start":{"line":76,"column":6},"end":{"line":76,"column":44}},"26":{"start":{"line":81,"column":4},"end":{"line":122,"column":5}},"27":{"start":{"line":84,"column":10},"end":{"line":87,"column":8}},"28":{"start":{"line":88,"column":20},"end":{"line":88,"column":56}},"29":{"start":{"line":90,"column":6},"end":{"line":95,"column":7}},"30":{"start":{"line":91,"column":8},"end":{"line":91,"column":27}},"31":{"start":{"line":92,"column":8},"end":{"line":92,"column":49}},"32":{"start":{"line":94,"column":8},"end":{"line":94,"column":49}},"33":{"start":{"line":97,"column":25},"end":{"line":97,"column":73}},"34":{"start":{"line":97,"column":43},"end":{"line":97,"column":72}},"35":{"start":{"line":99,"column":6},"end":{"line":119,"column":7}},"36":{"start":{"line":100,"column":8},"end":{"line":104,"column":10}},"37":{"start":{"line":106,"column":8},"end":{"line":118,"column":10}},"38":{"start":{"line":121,"column":6},"end":{"line":121,"column":44}},"39":{"start":{"line":126,"column":4},"end":{"line":175,"column":5}},"40":{"start":{"line":127,"column":21},"end":{"line":138,"column":8}},"41":{"start":{"line":141,"column":10},"end":{"line":141,"column":16}},"42":{"start":{"line":143,"column":6},"end":{"line":159,"column":7}},"43":{"start":{"line":144,"column":22},"end":{"line":144,"column":58}},"44":{"start":{"line":146,"column":8},"end":{"line":158,"column":9}},"45":{"start":{"line":147,"column":10},"end":{"line":147,"column":27}},"46":{"start":{"line":148,"column":10},"end":{"line":148,"column":29}},"47":{"start":{"line":149,"column":10},"end":{"line":149,"column":52}},"48":{"start":{"line":153,"column":14},"end":{"line":156,"column":12}},"49":{"start":{"line":157,"column":10},"end":{"line":157,"column":54}},"50":{"start":{"line":161,"column":6},"end":{"line":165,"column":8}},"51":{"start":{"line":167,"column":6},"end":{"line":174,"column":8}},"52":{"start":{"line":179,"column":4},"end":{"line":235,"column":5}},"53":{"start":{"line":182,"column":10},"end":{"line":186,"column":8}},"54":{"start":{"line":187,"column":20},"end":{"line":187,"column":56}},"55":{"start":{"line":189,"column":6},"end":{"line":212,"column":7}},"56":{"start":{"line":190,"column":28},"end":{"line":190,"column":67}},"57":{"start":{"line":190,"column":47},"end":{"line":190,"column":66}},"58":{"start":{"line":191,"column":27},"end":{"line":191,"column":66}},"59":{"start":{"line":191,"column":46},"end":{"line":191,"column":65}},"60":{"start":{"line":193,"column":8},"end":{"line":203,"column":9}},"61":{"start":{"line":194,"column":10},"end":{"line":194,"column":51}},"62":{"start":{"line":195,"column":10},"end":{"line":195,"column":57}},"63":{"start":{"line":196,"column":10},"end":{"line":196,"column":45}},"64":{"start":{"line":197,"column":10},"end":{"line":197,"column":53}},"65":{"start":{"line":198,"column":10},"end":{"line":198,"column":51}},"66":{"start":{"line":199,"column":10},"end":{"line":199,"column":53}},"67":{"start":{"line":200,"column":10},"end":{"line":200,"column":37}},"68":{"start":{"line":201,"column":10},"end":{"line":201,"column":29}},"69":{"start":{"line":202,"column":10},"end":{"line":202,"column":58}},"70":{"start":{"line":207,"column":12},"end":{"line":210,"column":10}},"71":{"start":{"line":211,"column":8},"end":{"line":211,"column":52}},"72":{"start":{"line":214,"column":6},"end":{"line":225,"column":7}},"73":{"start":{"line":215,"column":8},"end":{"line":218,"column":10}},"74":{"start":{"line":220,"column":8},"end":{"line":224,"column":10}},"75":{"start":{"line":227,"column":6},"end":{"line":234,"column":8}},"76":{"start":{"line":239,"column":4},"end":{"line":279,"column":5}},"77":{"start":{"line":242,"column":10},"end":{"line":245,"column":8}},"78":{"start":{"line":246,"column":20},"end":{"line":246,"column":56}},"79":{"start":{"line":248,"column":6},"end":{"line":260,"column":7}},"80":{"start":{"line":249,"column":28},"end":{"line":249,"column":67}},"81":{"start":{"line":249,"column":47},"end":{"line":249,"column":66}},"82":{"start":{"line":250,"column":8},"end":{"line":250,"column":27}},"83":{"start":{"line":251,"column":8},"end":{"line":251,"column":56}},"84":{"start":{"line":255,"column":12},"end":{"line":258,"column":10}},"85":{"start":{"line":259,"column":8},"end":{"line":259,"column":52}},"86":{"start":{"line":262,"column":6},"end":{"line":273,"column":7}},"87":{"start":{"line":263,"column":8},"end":{"line":266,"column":10}},"88":{"start":{"line":268,"column":8},"end":{"line":272,"column":10}},"89":{"start":{"line":275,"column":6},"end":{"line":278,"column":8}},"90":{"start":{"line":283,"column":4},"end":{"line":308,"column":5}},"91":{"start":{"line":284,"column":21},"end":{"line":291,"column":8}},"92":{"start":{"line":294,"column":10},"end":{"line":294,"column":16}},"93":{"start":{"line":295,"column":6},"end":{"line":301,"column":8}},"94":{"start":{"line":303,"column":6},"end":{"line":307,"column":8}},"95":{"start":{"line":312,"column":4},"end":{"line":376,"column":5}},"96":{"start":{"line":315,"column":10},"end":{"line":318,"column":8}},"97":{"start":{"line":319,"column":33},"end":{"line":319,"column":89}},"98":{"start":{"line":319,"column":59},"end":{"line":319,"column":88}},"99":{"start":{"line":321,"column":6},"end":{"line":367,"column":7}},"100":{"start":{"line":322,"column":8},"end":{"line":322,"column":102}},"101":{"start":{"line":325,"column":12},"end":{"line":329,"column":10}},"102":{"start":{"line":330,"column":22},"end":{"line":330,"column":58}},"103":{"start":{"line":332,"column":8},"end":{"line":355,"column":9}},"104":{"start":{"line":333,"column":30},"end":{"line":333,"column":79}},"105":{"start":{"line":333,"column":49},"end":{"line":333,"column":78}},"106":{"start":{"line":334,"column":29},"end":{"line":334,"column":78}},"107":{"start":{"line":334,"column":48},"end":{"line":334,"column":77}},"108":{"start":{"line":336,"column":10},"end":{"line":346,"column":11}},"109":{"start":{"line":337,"column":12},"end":{"line":337,"column":60}},"110":{"start":{"line":338,"column":12},"end":{"line":338,"column":66}},"111":{"start":{"line":339,"column":12},"end":{"line":339,"column":54}},"112":{"start":{"line":340,"column":12},"end":{"line":340,"column":62}},"113":{"start":{"line":341,"column":12},"end":{"line":341,"column":60}},"114":{"start":{"line":342,"column":12},"end":{"line":342,"column":62}},"115":{"start":{"line":343,"column":12},"end":{"line":343,"column":39}},"116":{"start":{"line":344,"column":12},"end":{"line":344,"column":31}},"117":{"start":{"line":345,"column":12},"end":{"line":345,"column":60}},"118":{"start":{"line":350,"column":14},"end":{"line":353,"column":12}},"119":{"start":{"line":354,"column":10},"end":{"line":354,"column":54}},"120":{"start":{"line":357,"column":8},"end":{"line":361,"column":10}},"121":{"start":{"line":363,"column":8},"end":{"line":366,"column":10}},"122":{"start":{"line":369,"column":6},"end":{"line":375,"column":8}},"123":{"start":{"line":380,"column":4},"end":{"line":417,"column":5}},"124":{"start":{"line":383,"column":10},"end":{"line":386,"column":8}},"125":{"start":{"line":387,"column":29},"end":{"line":387,"column":79}},"126":{"start":{"line":387,"column":55},"end":{"line":387,"column":78}},"127":{"start":{"line":388,"column":6},"end":{"line":388,"column":49}},"128":{"start":{"line":391,"column":10},"end":{"line":395,"column":8}},"129":{"start":{"line":398,"column":10},"end":{"line":401,"column":8}},"130":{"start":{"line":402,"column":6},"end":{"line":402,"column":25}},"131":{"start":{"line":403,"column":6},"end":{"line":403,"column":55}},"132":{"start":{"line":404,"column":6},"end":{"line":408,"column":8}},"133":{"start":{"line":410,"column":6},"end":{"line":416,"column":8}},"134":{"start":{"line":422,"column":0},"end":{"line":422,"column":28}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":14,"column":2},"end":{"line":14,"column":3}},"loc":{"start":{"line":14,"column":25},"end":{"line":33,"column":3}},"line":14},"1":{"name":"(anonymous_1)","decl":{"start":{"line":35,"column":2},"end":{"line":35,"column":3}},"loc":{"start":{"line":35,"column":55},"end":{"line":78,"column":3}},"line":35},"2":{"name":"(anonymous_2)","decl":{"start":{"line":52,"column":37},"end":{"line":52,"column":38}},"loc":{"start":{"line":52,"column":43},"end":{"line":52,"column":66}},"line":52},"3":{"name":"(anonymous_3)","decl":{"start":{"line":80,"column":2},"end":{"line":80,"column":3}},"loc":{"start":{"line":80,"column":53},"end":{"line":123,"column":3}},"line":80},"4":{"name":"(anonymous_4)","decl":{"start":{"line":97,"column":37},"end":{"line":97,"column":38}},"loc":{"start":{"line":97,"column":43},"end":{"line":97,"column":72}},"line":97},"5":{"name":"(anonymous_5)","decl":{"start":{"line":125,"column":2},"end":{"line":125,"column":3}},"loc":{"start":{"line":125,"column":31},"end":{"line":176,"column":3}},"line":125},"6":{"name":"(anonymous_6)","decl":{"start":{"line":178,"column":2},"end":{"line":178,"column":3}},"loc":{"start":{"line":178,"column":28},"end":{"line":236,"column":3}},"line":178},"7":{"name":"(anonymous_7)","decl":{"start":{"line":190,"column":41},"end":{"line":190,"column":42}},"loc":{"start":{"line":190,"column":47},"end":{"line":190,"column":66}},"line":190},"8":{"name":"(anonymous_8)","decl":{"start":{"line":191,"column":40},"end":{"line":191,"column":41}},"loc":{"start":{"line":191,"column":46},"end":{"line":191,"column":65}},"line":191},"9":{"name":"(anonymous_9)","decl":{"start":{"line":238,"column":2},"end":{"line":238,"column":3}},"loc":{"start":{"line":238,"column":31},"end":{"line":280,"column":3}},"line":238},"10":{"name":"(anonymous_10)","decl":{"start":{"line":249,"column":41},"end":{"line":249,"column":42}},"loc":{"start":{"line":249,"column":47},"end":{"line":249,"column":66}},"line":249},"11":{"name":"(anonymous_11)","decl":{"start":{"line":282,"column":2},"end":{"line":282,"column":3}},"loc":{"start":{"line":282,"column":30},"end":{"line":309,"column":3}},"line":282},"12":{"name":"(anonymous_12)","decl":{"start":{"line":311,"column":2},"end":{"line":311,"column":3}},"loc":{"start":{"line":311,"column":37},"end":{"line":377,"column":3}},"line":311},"13":{"name":"(anonymous_13)","decl":{"start":{"line":319,"column":53},"end":{"line":319,"column":54}},"loc":{"start":{"line":319,"column":59},"end":{"line":319,"column":88}},"line":319},"14":{"name":"(anonymous_14)","decl":{"start":{"line":333,"column":43},"end":{"line":333,"column":44}},"loc":{"start":{"line":333,"column":49},"end":{"line":333,"column":78}},"line":333},"15":{"name":"(anonymous_15)","decl":{"start":{"line":334,"column":42},"end":{"line":334,"column":43}},"loc":{"start":{"line":334,"column":48},"end":{"line":334,"column":77}},"line":334},"16":{"name":"(anonymous_16)","decl":{"start":{"line":379,"column":2},"end":{"line":379,"column":3}},"loc":{"start":{"line":379,"column":37},"end":{"line":418,"column":3}},"line":379},"17":{"name":"(anonymous_17)","decl":{"start":{"line":387,"column":49},"end":{"line":387,"column":50}},"loc":{"start":{"line":387,"column":55},"end":{"line":387,"column":78}},"line":387}},"branchMap":{"0":{"loc":{"start":{"line":18,"column":6},"end":{"line":29,"column":7}},"type":"if","locations":[{"start":{"line":18,"column":6},"end":{"line":29,"column":7}},{"start":{"line":18,"column":6},"end":{"line":29,"column":7}}],"line":18},"1":{"loc":{"start":{"line":45,"column":6},"end":{"line":50,"column":7}},"type":"if","locations":[{"start":{"line":45,"column":6},"end":{"line":50,"column":7}},{"start":{"line":45,"column":6},"end":{"line":50,"column":7}}],"line":45},"2":{"loc":{"start":{"line":54,"column":6},"end":{"line":74,"column":7}},"type":"if","locations":[{"start":{"line":54,"column":6},"end":{"line":74,"column":7}},{"start":{"line":54,"column":6},"end":{"line":74,"column":7}}],"line":54},"3":{"loc":{"start":{"line":90,"column":6},"end":{"line":95,"column":7}},"type":"if","locations":[{"start":{"line":90,"column":6},"end":{"line":95,"column":7}},{"start":{"line":90,"column":6},"end":{"line":95,"column":7}}],"line":90},"4":{"loc":{"start":{"line":99,"column":6},"end":{"line":119,"column":7}},"type":"if","locations":[{"start":{"line":99,"column":6},"end":{"line":119,"column":7}},{"start":{"line":99,"column":6},"end":{"line":119,"column":7}}],"line":99},"5":{"loc":{"start":{"line":143,"column":6},"end":{"line":159,"column":7}},"type":"if","locations":[{"start":{"line":143,"column":6},"end":{"line":159,"column":7}},{"start":{"line":143,"column":6},"end":{"line":159,"column":7}}],"line":143},"6":{"loc":{"start":{"line":146,"column":8},"end":{"line":158,"column":9}},"type":"if","locations":[{"start":{"line":146,"column":8},"end":{"line":158,"column":9}},{"start":{"line":146,"column":8},"end":{"line":158,"column":9}}],"line":146},"7":{"loc":{"start":{"line":189,"column":6},"end":{"line":212,"column":7}},"type":"if","locations":[{"start":{"line":189,"column":6},"end":{"line":212,"column":7}},{"start":{"line":189,"column":6},"end":{"line":212,"column":7}}],"line":189},"8":{"loc":{"start":{"line":193,"column":8},"end":{"line":203,"column":9}},"type":"if","locations":[{"start":{"line":193,"column":8},"end":{"line":203,"column":9}},{"start":{"line":193,"column":8},"end":{"line":203,"column":9}}],"line":193},"9":{"loc":{"start":{"line":194,"column":27},"end":{"line":194,"column":50}},"type":"binary-expr","locations":[{"start":{"line":194,"column":27},"end":{"line":194,"column":42}},{"start":{"line":194,"column":46},"end":{"line":194,"column":50}}],"line":194},"10":{"loc":{"start":{"line":195,"column":30},"end":{"line":195,"column":56}},"type":"binary-expr","locations":[{"start":{"line":195,"column":30},"end":{"line":195,"column":48}},{"start":{"line":195,"column":52},"end":{"line":195,"column":56}}],"line":195},"11":{"loc":{"start":{"line":196,"column":24},"end":{"line":196,"column":44}},"type":"binary-expr","locations":[{"start":{"line":196,"column":24},"end":{"line":196,"column":36}},{"start":{"line":196,"column":40},"end":{"line":196,"column":44}}],"line":196},"12":{"loc":{"start":{"line":197,"column":28},"end":{"line":197,"column":52}},"type":"binary-expr","locations":[{"start":{"line":197,"column":28},"end":{"line":197,"column":44}},{"start":{"line":197,"column":48},"end":{"line":197,"column":52}}],"line":197},"13":{"loc":{"start":{"line":198,"column":27},"end":{"line":198,"column":50}},"type":"binary-expr","locations":[{"start":{"line":198,"column":27},"end":{"line":198,"column":42}},{"start":{"line":198,"column":46},"end":{"line":198,"column":50}}],"line":198},"14":{"loc":{"start":{"line":199,"column":28},"end":{"line":199,"column":52}},"type":"binary-expr","locations":[{"start":{"line":199,"column":28},"end":{"line":199,"column":44}},{"start":{"line":199,"column":48},"end":{"line":199,"column":52}}],"line":199},"15":{"loc":{"start":{"line":214,"column":6},"end":{"line":225,"column":7}},"type":"if","locations":[{"start":{"line":214,"column":6},"end":{"line":225,"column":7}},{"start":{"line":214,"column":6},"end":{"line":225,"column":7}}],"line":214},"16":{"loc":{"start":{"line":248,"column":6},"end":{"line":260,"column":7}},"type":"if","locations":[{"start":{"line":248,"column":6},"end":{"line":260,"column":7}},{"start":{"line":248,"column":6},"end":{"line":260,"column":7}}],"line":248},"17":{"loc":{"start":{"line":262,"column":6},"end":{"line":273,"column":7}},"type":"if","locations":[{"start":{"line":262,"column":6},"end":{"line":273,"column":7}},{"start":{"line":262,"column":6},"end":{"line":273,"column":7}}],"line":262},"18":{"loc":{"start":{"line":321,"column":6},"end":{"line":367,"column":7}},"type":"if","locations":[{"start":{"line":321,"column":6},"end":{"line":367,"column":7}},{"start":{"line":321,"column":6},"end":{"line":367,"column":7}}],"line":321},"19":{"loc":{"start":{"line":332,"column":8},"end":{"line":355,"column":9}},"type":"if","locations":[{"start":{"line":332,"column":8},"end":{"line":355,"column":9}},{"start":{"line":332,"column":8},"end":{"line":355,"column":9}}],"line":332},"20":{"loc":{"start":{"line":336,"column":10},"end":{"line":346,"column":11}},"type":"if","locations":[{"start":{"line":336,"column":10},"end":{"line":346,"column":11}},{"start":{"line":336,"column":10},"end":{"line":346,"column":11}}],"line":336},"21":{"loc":{"start":{"line":337,"column":29},"end":{"line":337,"column":59}},"type":"binary-expr","locations":[{"start":{"line":337,"column":29},"end":{"line":337,"column":51}},{"start":{"line":337,"column":55},"end":{"line":337,"column":59}}],"line":337},"22":{"loc":{"start":{"line":338,"column":32},"end":{"line":338,"column":65}},"type":"binary-expr","locations":[{"start":{"line":338,"column":32},"end":{"line":338,"column":57}},{"start":{"line":338,"column":61},"end":{"line":338,"column":65}}],"line":338},"23":{"loc":{"start":{"line":339,"column":26},"end":{"line":339,"column":53}},"type":"binary-expr","locations":[{"start":{"line":339,"column":26},"end":{"line":339,"column":45}},{"start":{"line":339,"column":49},"end":{"line":339,"column":53}}],"line":339},"24":{"loc":{"start":{"line":340,"column":30},"end":{"line":340,"column":61}},"type":"binary-expr","locations":[{"start":{"line":340,"column":30},"end":{"line":340,"column":53}},{"start":{"line":340,"column":57},"end":{"line":340,"column":61}}],"line":340},"25":{"loc":{"start":{"line":341,"column":29},"end":{"line":341,"column":59}},"type":"binary-expr","locations":[{"start":{"line":341,"column":29},"end":{"line":341,"column":51}},{"start":{"line":341,"column":55},"end":{"line":341,"column":59}}],"line":341},"26":{"loc":{"start":{"line":342,"column":30},"end":{"line":342,"column":61}},"type":"binary-expr","locations":[{"start":{"line":342,"column":30},"end":{"line":342,"column":53}},{"start":{"line":342,"column":57},"end":{"line":342,"column":61}}],"line":342}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":2,"6":2,"7":2,"8":1,"9":1,"10":1,"11":1,"12":0,"13":3,"14":3,"15":3,"16":3,"17":2,"18":2,"19":1,"20":3,"21":21,"22":3,"23":2,"24":1,"25":0,"26":3,"27":3,"28":3,"29":3,"30":2,"31":2,"32":1,"33":3,"34":21,"35":3,"36":2,"37":1,"38":0,"39":3,"40":3,"41":2,"42":2,"43":2,"44":2,"45":1,"46":1,"47":1,"48":1,"49":1,"50":2,"51":1,"52":4,"53":4,"54":3,"55":3,"56":2,"57":14,"58":2,"59":14,"60":2,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":3,"73":1,"74":2,"75":1,"76":4,"77":4,"78":3,"79":3,"80":1,"81":7,"82":1,"83":1,"84":2,"85":2,"86":3,"87":1,"88":2,"89":1,"90":2,"91":2,"92":1,"93":1,"94":1,"95":4,"96":4,"97":4,"98":20,"99":3,"100":2,"101":2,"102":2,"103":2,"104":1,"105":7,"106":1,"107":7,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":2,"121":1,"122":1,"123":2,"124":2,"125":2,"126":8,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1},"f":{"0":2,"1":3,"2":21,"3":3,"4":21,"5":3,"6":4,"7":14,"8":14,"9":4,"10":7,"11":2,"12":4,"13":20,"14":7,"15":7,"16":2,"17":8},"b":{"0":[1,1],"1":[2,1],"2":[2,1],"3":[2,1],"4":[2,1],"5":[2,0],"6":[1,1],"7":[2,1],"8":[1,1],"9":[1,0],"10":[1,0],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,2],"16":[1,2],"17":[1,2],"18":[2,1],"19":[1,1],"20":[1,0],"21":[1,0],"22":[1,0],"23":[1,0],"24":[1,0],"25":[1,0],"26":[1,0]},"inputSourceMap":{"version":3,"sources":["user.js"],"names":["axios","require","Redis","redis","ObjectId","Types","baseUrl","process","env","USERAPI","Controller","findAll","users","JSON","parse","get","data","url","method","set","stringify","error","console","log","findByName","parent","args","context","info","del","filtered","filter","el","email","undefined","status","message","user","_id","password","hp","rating","quota","findById","String","userId","create","_","result","errors","push","dataGet","response","put","notFiltered","delete","login","access_token","updateRating","dataToUpdate","filteredToUpdate","FinalBidderId","FinalBidderRating","toFixed","updateStatus","dataToFilter","dataForRedis","module","exports"],"mappings":"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","sourceRoot":"/Users/robin/Desktop/hacktiv8/phase3/w4/barteryuk/barteryuk-orchestrator/datasources/","sourcesContent":["const axios = require(\"axios\");\nconst Redis = require(\"ioredis\");\nconst redis = new Redis();\nconst { ObjectId } = require(\"mongoose\").Types;\n\nconst baseUrl = process.env.USERAPI;\n\nclass Controller {\n  static async findAll() {\n    try {\n      const users = JSON.parse(await redis.get(\"users\"));\n      if (users) {\n        return users;\n      } else {\n        const { data } = await axios({\n          url: baseUrl,\n          method: \"GET\",\n        });\n        redis.set(\"users\", JSON.stringify(data));\n        return data;\n      }\n    } catch (error) {\n      return console.log(\"error : \", error);\n    }\n  }\n\n  static async findByName(parent, args, context, info) {\n    try {\n      const { data } = await axios({\n        url: baseUrl,\n        method: \"GET\",\n      });\n\n      const users = JSON.parse(await redis.get(\"users\"));\n      if (users) {\n        redis.del(\"users\");\n        redis.set(\"users\", JSON.stringify(data));\n      } else {\n        redis.set(\"users\", JSON.stringify(data));\n      }\n\n      const [filtered] = data.filter((el) => el.email === args.email);\n      if (filtered !== undefined) {\n        return {\n          status: 200,\n          message: \"User Found\",\n          user: filtered,\n        };\n      } else {\n        return {\n          status: 404,\n          message: \"Orchestrator Validation: User not found\",\n          user: {\n            _id: \"not found\",\n            email: args.email,\n            password: \"not found\",\n            hp: \"not found\",\n            rating: 0,\n            quota: 0,\n            status: true,\n          },\n        };\n      }\n    } catch (error) {\n      return console.log(\"error : \", error);\n    }\n  }\n\n  static async findById(parent, args, context, info) {\n    try {\n      const { data } = await axios({\n        url: baseUrl,\n        method: \"GET\",\n      });\n\n      const users = JSON.parse(await redis.get(\"users\"));\n      if (users) {\n        redis.del(\"users\");\n        redis.set(\"users\", JSON.stringify(data));\n      } else {\n        redis.set(\"users\", JSON.stringify(data));\n      }\n\n      const [filtered] = data.filter((el) => String(el._id) == args.userId);\n      if (filtered !== undefined) {\n        return {\n          status: 200,\n          message: \"User Found\",\n          user: filtered,\n        };\n      } else {\n        return {\n          status: 404,\n          message: \"Orchestrator Validation: User not found\",\n          user: {\n            _id: \"not found\",\n            email: args.email,\n            password: \"not found\",\n            hp: \"not found\",\n            rating: 0,\n            quota: 0,\n            status: true,\n          },\n        };\n      }\n    } catch (error) {\n      return console.log(\"error : \", error);\n    }\n  }\n\n  static async create(_, args) {\n    try {\n      const result = await axios({\n        url: baseUrl,\n        method: \"POST\",\n        data: {\n          email: args.user.email,\n          password: args.user.password,\n          hp: args.user.hp,\n          rating: 5,\n          quota: 2,\n          status: false,\n        },\n      });\n      const { data } = result;\n      if (!data.errors) {\n        const users = JSON.parse(await redis.get(\"users\"));\n        if (users) {\n          users.push(data);\n          redis.del(\"users\");\n          redis.set(\"users\", JSON.stringify(users));\n        } else {\n          const { data: dataGet } = await axios({\n            url: baseUrl,\n            method: \"GET\",\n          });\n          redis.set(\"users\", JSON.stringify(dataGet));\n        }\n      }\n\n      return {\n        status: 201,\n        message: \"Orchestrator successfully created data to userService\",\n        user: data,\n      };\n    } catch (error) {\n      return {\n        status: error.response.data.status,\n        message: error.response.data.message,\n        user: {\n          _id: \"not found\",\n          ...args.user,\n        },\n      };\n    }\n  }\n\n  static async put(_, args) {\n    try {\n      const { data } = await axios({\n        url: baseUrl + args._id,\n        method: \"PUT\",\n        data: args.user,\n      });\n\n      const users = JSON.parse(await redis.get(\"users\"));\n      if (users) {\n        const notFiltered = users.filter((el) => el._id !== args._id);\n        const [filtered] = users.filter((el) => el._id === args._id);\n\n        if (filtered !== undefined) {\n          filtered.email = args.user.email || null;\n          filtered.password = args.user.password || null;\n          filtered.hp = args.user.hp || null;\n          filtered.rating = args.user.rating || null;\n          filtered.quota = args.user.quota || null;\n          filtered.status = args.user.status || null;\n          notFiltered.push(filtered);\n          redis.del(\"users\");\n          redis.set(\"users\", JSON.stringify(notFiltered));\n        }\n      } else {\n        const { data: dataGet } = await axios({\n          url: baseUrl,\n          method: \"GET\",\n        });\n        redis.set(\"users\", JSON.stringify(dataGet));\n      }\n      if (data === null) {\n        return {\n          status: 404,\n          message: \"Orchestrator Validation: User not found\",\n        };\n      } else {\n        return {\n          status: 200,\n          message: \"Orchestrator successfully updated data to userService\",\n          user: data,\n        };\n      }\n    } catch (error) {\n      return {\n        status: error.response.data.status,\n        message: error.response.data.message,\n        user: {\n          _id: \"not found\",\n          ...args.user,\n        },\n      };\n    }\n  }\n\n  static async delete(_, args) {\n    try {\n      const { data } = await axios({\n        url: baseUrl + args._id,\n        method: \"DELETE\",\n      });\n      const users = JSON.parse(await redis.get(\"users\"));\n      if (users) {\n        const notFiltered = users.filter((el) => el._id !== args._id);\n        redis.del(\"users\");\n        redis.set(\"users\", JSON.stringify(notFiltered));\n      } else {\n        const { data: dataGet } = await axios({\n          url: baseUrl,\n          method: \"GET\",\n        });\n        redis.set(\"users\", JSON.stringify(dataGet));\n      }\n      if (data === null) {\n        return {\n          status: 404,\n          message: \"Orchestrator Validation: User not found\",\n        };\n      } else {\n        return {\n          status: 200,\n          message: \"Orchestrator successfully deleted data from userService\",\n          user: data,\n        };\n      }\n    } catch (error) {\n      return {\n        status: 500,\n        message: \"Internal Server Error\",\n      };\n    }\n  }\n\n  static async login(_, args) {\n    try {\n      const result = await axios({\n        url: baseUrl + \"login\",\n        method: \"POST\",\n        data: {\n          email: args.email,\n          password: args.password,\n        },\n      });\n      const { data } = result;\n\n      return {\n        status: 200,\n        message: \"Orchestrator successfully logged in user to userService\",\n        email: data.email,\n        userId: data.userId,\n        access_token: data.access_token,\n      };\n    } catch (error) {\n      return {\n        status: error.response.data.status,\n        message: error.response.data.message,\n        access_token: \"not found\",\n      };\n    }\n  }\n\n  static async updateRating(_, args) {\n    try {\n      const { data: dataToUpdate } = await axios({\n        url: baseUrl,\n        method: \"GET\",\n      });\n\n      const [filteredToUpdate] = dataToUpdate.filter(\n        (el) => el._id === args.FinalBidderId\n      );\n      if (filteredToUpdate) {\n        filteredToUpdate.rating = (\n          (args.FinalBidderRating + filteredToUpdate.rating) /\n          2\n        ).toFixed(1);\n\n        const { data } = await axios({\n          url: baseUrl + args.FinalBidderId,\n          method: \"PUT\",\n          data: filteredToUpdate,\n        });\n        const users = JSON.parse(await redis.get(\"users\"));\n        if (users) {\n          const notFiltered = users.filter(\n            (el) => el._id !== args.FinalBidderId\n          );\n          const [filtered] = users.filter(\n            (el) => el._id === args.FinalBidderId\n          );\n\n          if (filtered !== undefined) {\n            filtered.email = filteredToUpdate.email || null;\n            filtered.password = filteredToUpdate.password || null;\n            filtered.hp = filteredToUpdate.hp || null;\n            filtered.rating = filteredToUpdate.rating || null;\n            filtered.quota = filteredToUpdate.quota || null;\n            filtered.status = filteredToUpdate.status || null;\n            notFiltered.push(filtered);\n            redis.del(\"users\");\n            redis.set(\"users\", JSON.stringify(notFiltered));\n          }\n        } else {\n          const { data: dataGet } = await axios({\n            url: baseUrl,\n            method: \"GET\",\n          });\n          redis.set(\"users\", JSON.stringify(dataGet));\n        }\n        return {\n          status: 200,\n          message: \"Orchestrator successfully updated rating to userService\",\n          user: data,\n        };\n      } else {\n        return {\n          status: 404,\n          message: \"Orchestrator Validation: User not found\",\n        };\n      }\n    } catch (error) {\n      return {\n        status: 500,\n        message: \"Internal Server Error\",\n        user: {\n          _id: \"not found\",\n        },\n      };\n    }\n  }\n\n  static async updateStatus(_, args) {\n    try {\n      const { data: dataToFilter } = await axios({\n        url: baseUrl,\n        method: \"GET\",\n      });\n\n      const [dataToUpdate] = dataToFilter.filter(\n        (el) => el.email === args.email\n      );\n\n      dataToUpdate.status = !dataToUpdate.status;\n\n      const { data } = await axios({\n        url: baseUrl + dataToUpdate._id,\n        method: \"PUT\",\n        data: dataToUpdate,\n      });\n\n      const { data: dataForRedis } = await axios({\n        url: baseUrl,\n        method: \"GET\",\n      });\n\n      redis.del(\"users\");\n      redis.set(\"users\", JSON.stringify(dataForRedis));\n\n      return {\n        status: 200,\n        message: \"Orchestrator successfully updated status to userService\",\n        user: data,\n      };\n    } catch (error) {\n      return {\n        status: 500,\n        message: \"Internal Server Error\",\n        user: {\n          _id: \"not found\",\n        },\n      };\n    }\n  }\n}\n\nmodule.exports = Controller;\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"8b2a6632520e72e025eea9680d858697e0c2d90f","contentHash":"18aa02b0e4e581e24850995da3c47814a9a32f27fb0653e4459fa8c4fa334a8f"}}